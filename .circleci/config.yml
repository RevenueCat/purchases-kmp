aliases:
  # Uses the same regex as release-tags-job
  release-tags-workflow: &release-tags-workflow
    when:
      and:
        - matches: { pattern: "^[0-9]+\\.[0-9]+\\.[0-9]+(?!.*-SNAPSHOT).*$", value: << pipeline.git.tag >> }
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
  # Uses the same regex as release-tags-workflow
  release-tags-job: &release-tags-job
    filters:
      tags:
        only: /^[0-9]+\.[0-9]+\.[0-9]+(?!.*-SNAPSHOT).*$/
      branches:
        ignore: /.*/

version: 2.1

orbs:
  android: circleci/android@2.5.0
  revenuecat: revenuecat/sdks-common-config@3.0.0

commands:
  install-android-sdk-on-macos:
    description: Install the Android SDK on macOS
    steps:
      - run:
          name: Install Android SDK commandline tools
          command: brew install --cask android-commandlinetools
      - run:
          name: Set Android SDK environment variables
          command: |
            echo 'export ANDROID_HOME="$HOMEBREW_PREFIX/share/android-commandlinetools"' >> "$BASH_ENV"
            echo 'export PATH="$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools:$PATH"' >> "$BASH_ENV"
      - android/accept-licenses
      - run:
          name: Install Android SDK platform tools
          command: sdkmanager "platform-tools"

  install-cocoapods-on-macos:
    steps:
      - run:
          name: Install CocoaPods
          command: bundle exec pod install --repo-update
          working_directory: iosApp

parameters:
  action:
    type: enum
    enum: [ build, upgrade-hybrid-common, bump ]
    default: build
  automatic:
    type: boolean
    default: false
  version:
    type: string
    default: ''

executors:
  android202409:
    docker:
      - image: cimg/android:2024.09.1
    resource_class: large
  jdk17:
    docker:
      - image: cimg/openjdk:17.0
  ruby3:
    docker:
      - image: cimg/ruby:3.3.0
  xcode15:
    macos:
      xcode: 15.4.0
    resource_class: macos.m1.medium.gen1
    environment:
      # Avoid waiting for Homebrew to auto update existing packages, as everything we care about is
      # freshly installed.
      HOMEBREW_NO_AUTO_UPDATE: 1

jobs:
  update-purchases-hybrid-common-version:
    description: "Opens a PR updating the purchases-hybrid-common dependency to the latest version."
    executor: xcode15
    steps:
      - checkout
      - revenuecat/install-gem-mac-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - revenuecat/setup-git-credentials
      - run:
          name: Update purchases-hybrid-common to << pipeline.parameters.version >>
          command: |
            bundle exec fastlane update_hybrid_common \
            version:<< pipeline.parameters.version >> \
            open_pr:true \
            automatic_release:<< pipeline.parameters.automatic >>

  prepare-next-snapshot-version:
    description: "Opens a PR updating the SDK version to the next minor, appending -SNAPSHOT."
    executor: ruby3
    steps:
      - checkout
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - revenuecat/setup-git-credentials
      - run:
          name: Prepare next SNAPSHOT version
          command: bundle exec fastlane prepare_next_snapshot_version

  detekt:
    executor: jdk17
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Run Detekt on commonMain
          command: ./gradlew detektCommonMain
      - android/save-gradle-cache
      - run:
          name: Collect Detekt HTML reports
          command: mkdir -p artifacts/detekt && mv build/reports/detekt/*.html artifacts/detekt/
      - store_artifacts:
          path: artifacts/detekt
          destination: detekt

  validate-binary-compatibility:
    executor: xcode15
    steps:
      - install-android-sdk-on-macos
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Validate binary compatibility
          command: ./gradlew apiCheck
      - android/save-gradle-cache

  build-libraries-android:
    executor: android202409
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Build libraries for Android
          command: |
            tasks=()
            for module in core revenuecatui datetime either result; do
              for buildType in Debug Release; do
                tasks+=(":$module:compile${buildType}KotlinAndroid")
              done
            done
            ./gradlew "${tasks[@]}"
      - android/save-gradle-cache

  build-libraries-ios:
    executor: xcode15
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Build libraries for iOS
          command: |
            tasks=()
            for module in core revenuecatui datetime either result; do
              for arch in Arm64 SimulatorArm64 X64; do
                tasks+=(":$module:compileKotlinIos$arch")
              done
            done
            ./gradlew "${tasks[@]}"
      - android/save-gradle-cache

  build-sample-android:
    executor: android202409
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Build sample app for Android
          command: |
            tasks=()
            for buildType in Debug Release; do
              tasks+=(":composeApp:compile${buildType}KotlinAndroid")
            done
            ./gradlew "${tasks[@]}"
      - android/save-gradle-cache

  build-sample-ios:
    executor: xcode15
    steps:
      - checkout
      - android/restore-gradle-cache
      - revenuecat/install-gem-mac-dependencies:
          cache-version: v1
      - install-cocoapods-on-macos
      - run:
          name: Build sample app for iOS
          # This builds the composeApp Gradle module as a Run Script build phase.
          command: xcodebuild -workspace iosApp/iosApp.xcworkspace -scheme iosApp -configuration Debug -allowProvisioningUpdates
      - android/save-gradle-cache

  public-api-tests-android:
    executor: android202409
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Test public API for Android
          command: |
            tasks=()
            for buildType in Debug Release; do
              tasks+=(":apiTester:compile${buildType}KotlinAndroid")
            done
            ./gradlew "${tasks[@]}"
      - android/save-gradle-cache

  public-api-tests-ios:
    executor: xcode15
    steps:
      - checkout
      - android/restore-gradle-cache
      - revenuecat/install-gem-mac-dependencies:
          cache-version: v1
      - install-cocoapods-on-macos
      - run:
          name: Test public API for iOS
          command: |
            tasks=()
            for arch in Arm64 SimulatorArm64 X64; do
              tasks+=(":apiTester:compileKotlinIos$arch")
            done
            ./gradlew "${tasks[@]}"
      - android/save-gradle-cache

  unit-tests-android:
    executor: android202409
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Execute unit tests for Android
          command: |
            tasks=()
            for buildType in Debug Release; do
              tasks+=("test${buildType}UnitTest")
            done
            ./gradlew "${tasks[@]}"
      - android/save-gradle-cache

  unit-tests-ios:
    executor: xcode15
    steps:
      - checkout
      - android/restore-gradle-cache
      - run:
          name: Execute unit tests for iOS
          command: |
            tasks=()
            for arch in SimulatorArm64 X64; do
              tasks+=("ios${arch}Test")
            done
            ./gradlew "${tasks[@]}"
      - android/save-gradle-cache

  publish:
    description: "Publishes the SDK, either a SNAPSHOT or release version."
    executor: xcode15
    parameters:
      snapshot:
        description: Whether to publish a SNAPSHOT version. Will publish a final release if set to false.
        type: boolean
    steps:
      - checkout
      - install-android-sdk-on-macos
      - revenuecat/install-gem-mac-dependencies:
          cache-version: v1
      - install-cocoapods-on-macos
      - android/restore-gradle-cache
      - android/restore-build-cache
      - when:
          condition: << parameters.snapshot >>
          steps:
            - run:
                name: "Publish snapshot to Sonatype's snapshots repository"
                command: bundle exec fastlane publish_if_snapshot
      - unless:
          condition: << parameters.snapshot >>
          steps:
            - run:
                name: "Publish release to Maven Central"
                command: bundle exec fastlane publish_if_release
      - android/save-gradle-cache
      - android/save-build-cache

  create-github-release:
    description: "Creates a GitHub release for the current version"
    executor: ruby3
    steps:
      - checkout
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - run:
          name: "Create a GitHub release for the current version"
          command: bundle exec fastlane github_release_current_version

workflows:
  on-action-upgrade-hybrid-common:
    when:
      equal: [ upgrade-hybrid-common, << pipeline.parameters.action >> ]
    jobs:
      - update-purchases-hybrid-common-version:
          context:
            - git-user-ops
            - github-bot-public

  # This workflow runs for any commit to main, as well as for any other
  # branch with an open PR. This is controlled by the "Only build pull requests"
  # setting on CircleCI. 
  on-any-branch:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - revenuecat/danger:
          context: danger-bot
      - detekt
      - build-libraries-android
      - build-libraries-ios
      - build-sample-android:
          requires: [build-libraries-android]
      - build-sample-ios:
          requires: [build-libraries-ios]
      - public-api-tests-android:
          requires: [build-libraries-android]
      - public-api-tests-ios:
          requires: [build-libraries-ios]
      - unit-tests-android:
          requires: [build-libraries-android]
      - unit-tests-ios:
          requires: [build-libraries-ios]
      - validate-binary-compatibility:
          requires: 
            - build-libraries-android
            - build-libraries-ios

  on-main-branch:
    when:
      and:
        - equal: [ main, << pipeline.git.branch >> ]
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - prepare-next-snapshot-version:
          context:
            - git-user-ops
            - github-bot-public
      - publish:
          snapshot: true
          context: maven-central-publishing

  # The release train starts with the release-train workflow, which is automatically 
  # triggered every week, but can also be triggered manually by passing the "action" 
  # parameter with a value of "bump".
  # This workflow will create a new release branch and open a PR for it. This new 
  # release branch triggers the next workflow: on-release-branch.
  release-train:
    when:
      or:
        - and:
            - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
            - equal: [ "release-train", << pipeline.schedule.name >> ]
        - equal: [ bump, << pipeline.parameters.action >> ]
    jobs:
      - revenuecat/automatic-bump:
          context:
            - git-user-ops
            - github-bot-public

  # The second stage of the release train starts a hold job, which is a job that
  # needs to be manually approved on the CircleCI web app. This ensures there's 
  # always a human in the loop. After the hold job is approved, the current release
  # branch is tagged with the version number. This new release tag triggers the next
  # workflow: on-release-tag.
  on-release-branch:
    when:
      and:
        - matches: { pattern: "^release/.+$", value: << pipeline.git.branch >> }
        - not:
            equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - detekt
      - build-libraries-android
      - build-libraries-ios
      - build-sample-android:
          requires: [build-libraries-android]
      - build-sample-ios:
          requires: [build-libraries-ios]
      - public-api-tests-android:
          requires: [build-libraries-android]
      - public-api-tests-ios:
          requires: [build-libraries-ios]
      - unit-tests-android:
          requires: [build-libraries-android]
      - unit-tests-ios:
          requires: [build-libraries-ios]
      - validate-binary-compatibility:
          requires: 
            - build-libraries-android
            - build-libraries-ios
      - hold:
          type: approval
          requires:
            - build
      - revenuecat/tag-current-branch:
          requires:
            - hold
          context: git-user-ops

  # The third and last stage of the release train actually publishes the release
  # to Maven Central and creates a GitHub release for it. The release train has
  # now completed its journey.
  on-release-tag:
    <<: *release-tags-workflow
    jobs:
      - publish:
          snapshot: false
          context: maven-central-publishing
          <<: *release-tags-job
      - create-github-release:
          context: github-bot-public
          <<: *release-tags-job
