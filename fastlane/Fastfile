# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

REPO_NAME = "purchases-kmp"
PATH_CHANGELOG_LATEST = './CHANGELOG-LATEST.md'
PATH_CHANGELOG = './CHANGELOG.md'
PATH_VERSIONS = './VERSIONS.md'
FILES_WITH_SDK_VERSION = { './gradle/libs.versions.toml' => ["revenuecat-kmp = \"{x}\""] }

desc "Bumps version, edits changelog, and creates pull request"
lane :bump do |options|
  phc_version = get_phc_version
  bump_version_update_changelog_create_pr(
    current_version: current_version_number,
    changelog_latest_path: PATH_CHANGELOG_LATEST,
    changelog_path: PATH_CHANGELOG,
    files_to_update: FILES_WITH_SDK_VERSION,
    files_to_update_without_prerelease_modifiers: {},
    repo_name: REPO_NAME,
    github_rate_limit: options[:github_rate_limit],
    editor: options[:editor],
    next_version: options[:next_version],
    automatic_release: options[:automatic_release],
    hybrid_common_version: phc_version,
    versions_file_path: PATH_VERSIONS,
    is_prerelease: options[:is_prerelease],
    append_phc_version_if_next_version_is_not_prerelease: true
  )
  update_hybrids_versions_file(
    versions_file_path: PATH_VERSIONS,
    new_sdk_version: current_version_number,
    hybrid_common_version: phc_version
  )
  commit_current_changes(commit_message: 'Updates VERSIONS.md')
  push_to_git_remote(set_upstream: true)
end

desc "Automatically determines next version, bumps it, edits changelog, and creates pull request"
lane :automatic_bump do |options|
  next_version, type_of_bump = determine_next_version_using_labels(
    repo_name: REPO_NAME,
    github_rate_limit: options[:github_rate_limit]
  )
  options[:next_version] = next_version
  options[:automatic_release] = true
  if type_of_bump == :skip
    UI.message('Skipping automatic bump since the next version doesn\'t include public facing changes')
    next
  elsif type_of_bump == :major
    UI.message('Skipping automatic bump since the next version is a major release')
    next
  end
  bump(options)
end

desc "Update purchases-hybrid-common dependency"
lane :update_hybrid_common do |options|
  if options[:dry_run]
    dry_run = true
  end
  if options[:version]
    new_phc_version = options[:version]
  else
    UI.user_error!("Missing `version` argument")
  end

  current_phc_version = get_phc_version

  UI.message("ℹ️  Current Purchases Hybrid Common version: #{current_phc_version}")
  UI.message("ℹ️  Setting Purchases Hybrid Common version: #{new_phc_version}")
  files_to_update = {
    "gradle/libs.versions.toml" => ["revenuecat-common = \"{x}\""],
    "core/core.podspec" => ["spec.dependency 'PurchasesHybridCommon', '{x}'"],
    "mappings/mappings.podspec" => ["spec.dependency 'PurchasesHybridCommon', '{x}'"],
    "models/models.podspec" => ["spec.dependency 'PurchasesHybridCommon', '{x}'"],
    "revenuecatui/revenuecatui.podspec" => ["spec.dependency 'PurchasesHybridCommonUI', '{x}'"],
    "iosApp/Podfile" => ["  pod 'PurchasesHybridCommon', '{x}'", "  pod 'PurchasesHybridCommonUI', '{x}'"],
  }

  if dry_run
    UI.message("ℹ️  Nothing more to do, dry_run: true")
    next
  end

  bump_phc_version(
    repo_name: REPO_NAME,
    files_to_update: files_to_update,
    current_version: current_phc_version,
    next_version: new_phc_version,
    open_pr: options[:open_pr] || false,
    automatic_release: options[:automatic_release] || false
  )
  # Making sure Podfile.lock is updated.
  podfile = "iosApp/Podfile"
  cocoapods(
    podfile: podfile,
    repo_update: true
  )
  if options[:open_pr]
    git_commit(
      path: ["#{podfile}.lock"],
      message: "Updates Podfile.lock",
      skip_git_hooks: true
    )
    push_to_git_remote(
      tags: false,
      no_verify: true
    )
  end
end

desc "Opens a PR updating the SDK version to the next minor, appending -SNAPSHOT."
lane :prepare_next_snapshot_version do |options|
  create_next_snapshot_version(
    current_version: current_version_number,
    repo_name: REPO_NAME,
    github_pr_token: ENV["GITHUB_PULL_REQUEST_API_TOKEN"],
    files_to_update: FILES_WITH_SDK_VERSION
  )
end

desc "Tags the current branch with the current version number"
lane :tag_current_branch do |options|
  version_number = current_version_number
  check_no_git_tag_exists(version_number)

  add_git_tag(tag: version_number)
  push_git_tags(tag: version_number)
end

desc "Publish the SDK if the current version is a SNAPSHOT version"
lane :publish_if_snapshot do |options|
  version = current_version_number
  if version.end_with?("-SNAPSHOT")
    publish
  else
    UI.user_error!("The current version '#{version}' is not a SNAPSHOT version.")
  end
end

desc "Publish the SDK if the current version is a release version"
lane :publish_if_release do |options|
  version = current_version_number
  if version.end_with?("-SNAPSHOT")
    UI.user_error!("The current version '#{version}' is a SNAPSHOT version.")
  else
    publish
  end
end

desc "Creates a GitHub release for the current version"
lane :github_release_current_version do |options|
  github_release(version: current_version_number)
end

desc "Creates a GitHub release"
lane :github_release do |options|
  create_github_release(
    version: options[:version],
    repo_name: REPO_NAME,
    github_api_token: ENV["GITHUB_TOKEN"],
    changelog_latest_path: PATH_CHANGELOG_LATEST,
    upload_assets: []
  )
end

def get_phc_version
  android_phc_version = File.read("../gradle/libs.versions.toml")
    .match("revenuecat-common = \"(.*)\"")
    .captures[0]
  UI.user_error!("Android PHC version not found.") if android_phc_version.nil?
  
  ios_phc_version = File.read("../core/core.podspec")
    .match("spec.dependency 'PurchasesHybridCommon', '(.*)'")
    .captures[0]
  UI.user_error!("iOS PHC version not found.") if ios_phc_version.nil?

  ios_phc_ui_version = File.read("../revenuecatui/revenuecatui.podspec")
    .match("spec.dependency 'PurchasesHybridCommonUI', '(.*)'")
    .captures[0]
  UI.user_error!("iOS PHC UI version not found.") if ios_phc_ui_version.nil?
  
  versions_mismatch_error = "Found multiple PHC (UI) versions. Please make sure to use only 1."
  versions_match = android_phc_version == ios_phc_version && ios_phc_version == ios_phc_ui_version
  UI.user_error!(versions_mismatch_error) unless versions_match
  
  android_phc_version
  end

  def current_version_number
    File.read("../gradle/libs.versions.toml")
      .match("revenuecat-kmp = \"(.*)\"")
      .captures[0]
  end

  def check_no_git_tag_exists(version_number)
    if git_tag_exists(tag: version_number, remote: true, remote_name: 'origin')
      raise "git tag with version #{version_number} already exists!"
    end
  end

# Publishes the SDK. If the current version is a SNAPSHOT version, it will be published
# to Sonatype's snapshots repository, otherwise it will be published to Maven Central.
#
# This requires the following environment variables to be set:
# - SONATYPE_NEXUS_TOKEN_USERNAME
# - SONATYPE_NEXUS_TOKEN_PASSWORD
# - SIGNING_GPG_IN_MEMORY
# - GPG_SIGNING_KEY_PW_NEW
#
# These are set on CircleCI by providing the maven-central-publishing context when
# running the publish job.
def publish
  version = current_version_number
  UI.verbose("Publishing #{version}")
  ENV["ORG_GRADLE_PROJECT_mavenCentralUsername"] = ENV["SONATYPE_NEXUS_TOKEN_USERNAME"]
  ENV["ORG_GRADLE_PROJECT_mavenCentralPassword"] = ENV["SONATYPE_NEXUS_TOKEN_PASSWORD"]
  ENV["ORG_GRADLE_PROJECT_signingInMemoryKey"] = ENV["SIGNING_GPG_IN_MEMORY"]
  ENV["ORG_GRADLE_PROJECT_signingInMemoryKeyPassword"] = ENV["GPG_SIGNING_KEY_PW_NEW"]
  # Sonatype has a tendency to timeout. Default is 1 minute. This sets it to 5.
  # https://vanniktech.github.io/gradle-maven-publish-plugin/central/#timeouts
  ENV["SONATYPE_CONNECT_TIMEOUT_SECONDS"] = "300"
  gradle(
    task: "publishAllPublicationsToMavenCentralRepository",
    flags: "--no-configuration-cache"
  )
end
